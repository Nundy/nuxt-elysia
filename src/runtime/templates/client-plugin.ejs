import { treaty, type Treaty } from '@elysiajs/eden'
import { defineNuxtPlugin, useRequestEvent, useRequestHeaders, useAppConfig, useRuntimeConfig } from '#app'

declare module 'nuxt/schema' {
  interface AppConfigInput {
    /** Additional configuration for `$api` (Eden Treaty) */
    treatyConfig?: Treaty.Config
  }

  interface AppConfig {
    /** Additional configuration for `$api` (Eden Treaty) */
    treatyConfig?: Treaty.Config
  }
}

type ElysiaApp = import('h3').H3EventContext['_elysiaApp']

export default defineNuxtPlugin(() => {
  const event = useRequestEvent()
  const appConfig = useAppConfig()

  <% if (requestHeaders && requestHeaders.length > 0) { %>
  const requestHeaders = useRequestHeaders([
    <% for (const header of requestHeaders) { %>
    '<%= header %>',
    <% } %>
  ])
  <% } %>

  const api = treaty<ElysiaApp>(
    // In server-side: use _elysiaApp from event context
    // In client-side: make the base URL from window origin + base URL + app path
    event?.context._elysiaApp ?? (() => {
      const runtimeConfig = useRuntimeConfig()
      return window.location.origin + runtimeConfig.app.baseURL + '<%= path.slice(1) %>'
    })(),
    {
      headers: {
        <% if (requestHeaders && requestHeaders.length > 0) { %>
        ...requestHeaders,
        <% } %>
        ...appConfig.treatyConfig?.headers,
      },
      ...appConfig.treatyConfig,
    },
  )

  return {
    provide: { api },
  }
})
